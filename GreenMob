import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Gamification: User Input for Parameters
print("Welcome to the Gamified Re-Migration Simulation!")
re_mig_rate = float(input("Enter Re-Migration Rate (0.05-0.20, default 0.10): ") or 0.10)
self_worth_boost = float(input("Enter Self-Worth Boost (0.10-0.30, default 0.20): ") or 0.20)
crime_rate_migrant = float(input("Enter Migrant Crime Rate (0.05-0.10, default 0.07): ") or 0.07)

# Simulation parameters
start_year = 2025
end_year = 2045
years = np.arange(start_year, end_year + 1)
num_years = len(years)
native_pop = 70633000  # Constant native population
migrant_pop_start = 12367000  # Starting migrant population
crime_rate_native = 0.05  # Hypothetical native crime rate
social_cost_reduction = 0.20  # Not used since social_cost=0

# Initialize arrays
migrant_pop = np.zeros(num_years)
crime_rate = np.zeros(num_years)
social_cost = np.zeros(num_years)
re_mig_success = np.zeros(num_years)

migrant_pop[0] = migrant_pop_start
total_pop = native_pop + migrant_pop[0]
crime_rate[0] = (native_pop / total_pop * crime_rate_native) + (migrant_pop[0] / total_pop * crime_rate_migrant)
social_cost[0] = 0  # Set to zero
re_mig_success[0] = 0

for i in range(1, num_years):
    # Apply re-migration with self-worth boost
    re_mig = migrant_pop[i-1] * re_mig_rate * (1 + self_worth_boost)
    migrant_pop[i] = migrant_pop[i-1] - re_mig
    total_pop = native_pop + migrant_pop[i]
    crime_rate[i] = (native_pop / total_pop * crime_rate_native) + (migrant_pop[i] / total_pop * crime_rate_migrant)
    social_cost[i] = 0
    re_mig_success[i] = re_mig + re_mig_success[i-1]

# Gamification: Calculate Score and Levels
score = 0
levels_achieved = []
crime_reduction = (crime_rate[0] - crime_rate[-1]) * 100
if crime_reduction > 0.5:
    score += 30
    levels_achieved.append("Level 1: Crime Reduced!")
if migrant_pop[-1] < 1000000:
    score += 50
    levels_achieved.append("Level 2: Population Neutrality Achieved!")
savings = 500e9 * (1 - (migrant_pop[-1] / migrant_pop_start))  # Hypothetical savings
if savings > 400e9:
    score += 20
    levels_achieved.append("Level 3: Budget Saved!")

game_message = f"Game Score: {score}/100\nAchievements: {', '.join(levels_achieved) or 'None'}\nPlay again to improve!"

# Create DataFrame
df = pd.DataFrame({
    'Year': years,
    'Native Pop': native_pop,
    'Migrant Pop': migrant_pop,
    'Crime Rate': crime_rate,
    'Social Cost': social_cost,
    'Re-Mig Success': re_mig_success
})

# Ethical and Efficiency Advantages Text with Game Message
ethics_text = """
Ethical Advantages:
- Aligns with Sharia: Avoids harsh penalties by promoting repentance and return, boosting self-worth.
- Prevents 'rewarding' crime: No subsidies, reducing 'asylum tourism'.
- Christian Values: Conditional mercy fosters self-sufficiency (S³ Formula).

Efficiency Advantages:
- Social Cost to Zero: Saves billions for structures (e.g., 500 Bn €).
- Crime Rate Reduction: From {:.4f} to {:.4f}.
- Population Neutrality by 2045: Supports GG §148h.

{}
""".format(crime_rate[0], crime_rate[-1], game_message)

# Output
print(df.to_string(index=False))
print(ethics_text)

# Pie Charts
labels = ['Native', 'Migrant']
fig, axs = plt.subplots(1, 3, figsize=(15, 5))

# 2025 Pie
axs[0].pie([native_pop, migrant_pop[0]], labels=labels, autopct='%1.1f%%', colors=['#4CAF50', '#FF5722'])
axs[0].set_title('2025 Shares')

# 2045 Pie
axs[1].pie([native_pop, migrant_pop[-1]], labels=labels, autopct='%1.1f%%', colors=['#4CAF50', '#FF5722'])
axs[1].set_title('2045 Shares')

# Re-Migration Pie
axs[2].pie([re_mig_success[-1], migrant_pop[-1]], labels=['Re-Migrated', 'Remaining'], autopct='%1.1f%%', colors=['#2196F3', '#FFC107'])
axs[2].set_title('Re-Migration by 2045')

plt.show()  # Display charts (in local env; save as PNG if needed: fig.savefig('charts.png'))
